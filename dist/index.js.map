{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isComplexTypedArray = require( '@stdlib/array-base-assert-is-complex-typed-array' );\nvar isAccessorArray = require( '@stdlib/array-base-assert-is-accessor-array' );\nvar resolveGetter = require( '@stdlib/array-base-resolve-getter' );\nvar reinterpret = require( '@stdlib/strided-base-reinterpret-complex' );\n\n\n// FUNCTIONS //\n\n/**\n* Counts the number of elements in an indexed array that satisfy the provided testing function.\n*\n* @private\n* @param {Collection} x - input array\n* @param {Function} predicate - testing function\n* @param {*} [thisArg] - function context\n* @returns {NonNegativeInteger} number of values for which the provided function evaluates to true\n*\n* @example\n* var x = [ 0, 1, 0, 1 ];\n* function predicate( v ) {\n*     return v > 0;\n* }\n* var n = indexed( x, predicate );\n* // returns 2\n*/\nfunction indexed( x, predicate, thisArg ) {\n\tvar n;\n\tvar i;\n\n\tn = 0;\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\tif ( predicate.call( thisArg, x[ i ], i, x ) ) {\n\t\t\tn += 1;\n\t\t}\n\t}\n\treturn n;\n}\n\n/**\n* Counts the number of elements in an accessor array that satisfy the provided testing function.\n*\n* @private\n* @param {Collection} x - input array\n* @param {Function} predicate - testing function\n* @param {*} [thisArg] - function context\n* @returns {NonNegativeInteger} number of values for which the provided function evaluates to true\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n*\n* var x = toAccessorArray( [ 0, 1, 0, 1 ] );\n* function predicate( v ) {\n*\treturn v > 0;\n* }\n* var n = accessors( x, predicate );\n* // returns 2\n*/\nfunction accessors( x, predicate, thisArg ) {\n\tvar get;\n\tvar n;\n\tvar i;\n\n\tget = resolveGetter( x );\n\n\tn = 0;\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\tif ( predicate.call( thisArg, get( x, i ), i, x ) ) {\n\t\t\tn += 1;\n\t\t}\n\t}\n\treturn n;\n}\n\n/**\n* Counts the number of elements in a complex array that satisfy the provided testing function.\n*\n* @private\n* @param {Collection} x - input array\n* @param {Function} predicate - testing function\n* @param {*} [thisArg] - function context\n* @returns {NonNegativeInteger} number of values for which the provided function evaluates to true\n*\n* @example\n* var Complex128Array = require( '@stdlib/array-complex128' );\n*\n* var x = new Complex128Array( [ 1.0, 2.0, 0.0, 0.0, 3.0, 4.0, 0.0, 0.0 ] );\n* function predicate( v ) {\n*\treturn v > 0;\n* }\n* var n = complex( x, predicate );\n* // returns 2\n*/\nfunction complex( x, predicate, thisArg ) {\n\tvar view;\n\tvar n;\n\tvar i;\n\n\tview = reinterpret( x, 0 );\n\n\tn = 0;\n\tfor ( i = 0; i < view.length; i += 2 ) {\n\t\tif ( predicate.call( thisArg, view[ i ], i, view ) || predicate.call( thisArg, view[ i+1 ], i+1, view ) ) {\n\t\t\tn += 1;\n\t\t}\n\t}\n\treturn n;\n}\n\n\n// MAIN //\n\n/**\n* Counts the number of elements in an array that satisfy the provided testing function.\n*\n* @param {Collection} x - input array\n* @param {Function} predicate - testing array\n* @param {*} [thisArg] - function context\n* @returns {NonNegativeInteger} number of truthy values\n*\n* @example\n* var x = [ 0, 1, 0, 1, 1 ];\n* function predicate( v ) {\n*\treturn v > 0;\n* }\n* var n = countIf( x, predicate );\n* // returns 3\n*/\nfunction countIf( x, predicate, thisArg ) {\n\tif ( isAccessorArray( x ) ) {\n\t\tif ( isComplexTypedArray( x ) ) {\n\t\t\treturn complex( x, predicate, thisArg );\n\t\t}\n\t\treturn accessors( x, predicate, thisArg );\n\t}\n\treturn indexed( x, predicate, thisArg );\n}\n\n\n// EXPORTS //\n\nmodule.exports = countIf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Count the number of elements in an array that satisfy the provided testing function.\n*\n* @module @stdlib/array-base-count-if\n*\n* @example\n* var countIf = require( '@stdlib/array-base-count-if' );\n*\n* var x = [ 0, 1, 0, 1, 2 ];\n*\n* function predicate( value ) {\n*     return ( value % 2 === 0 )\n* }\n*\n* var n = countIf( x, predicate );\n* // returns 3\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAsB,QAAS,kDAAmD,EAClFC,EAAkB,QAAS,6CAA8C,EACzEC,EAAgB,QAAS,mCAAoC,EAC7DC,EAAc,QAAS,0CAA2C,EAsBtE,SAASC,EAASC,EAAGC,EAAWC,EAAU,CACzC,IAAI,EACA,EAGJ,IADA,EAAI,EACE,EAAI,EAAG,EAAIF,EAAE,OAAQ,IACrBC,EAAU,KAAMC,EAASF,EAAG,CAAE,EAAG,EAAGA,CAAE,IAC1C,GAAK,GAGP,OAAO,CACR,CAqBA,SAASG,EAAWH,EAAGC,EAAWC,EAAU,CAC3C,IAAIE,EACAC,EACAC,EAKJ,IAHAF,EAAMP,EAAeG,CAAE,EAEvBK,EAAI,EACEC,EAAI,EAAGA,EAAIN,EAAE,OAAQM,IACrBL,EAAU,KAAMC,EAASE,EAAKJ,EAAGM,CAAE,EAAGA,EAAGN,CAAE,IAC/CK,GAAK,GAGP,OAAOA,CACR,CAqBA,SAASE,EAASP,EAAGC,EAAWC,EAAU,CACzC,IAAIM,EACAH,EACAC,EAKJ,IAHAE,EAAOV,EAAaE,EAAG,CAAE,EAEzBK,EAAI,EACEC,EAAI,EAAGA,EAAIE,EAAK,OAAQF,GAAK,GAC7BL,EAAU,KAAMC,EAASM,EAAMF,CAAE,EAAGA,EAAGE,CAAK,GAAKP,EAAU,KAAMC,EAASM,EAAMF,EAAE,CAAE,EAAGA,EAAE,EAAGE,CAAK,KACrGH,GAAK,GAGP,OAAOA,CACR,CAqBA,SAASI,EAAST,EAAGC,EAAWC,EAAU,CACzC,OAAKN,EAAiBI,CAAE,EAClBL,EAAqBK,CAAE,EACpBO,EAASP,EAAGC,EAAWC,CAAQ,EAEhCC,EAAWH,EAAGC,EAAWC,CAAQ,EAElCH,EAASC,EAAGC,EAAWC,CAAQ,CACvC,CAKAR,EAAO,QAAUe,IC1HjB,IAAIC,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isComplexTypedArray", "isAccessorArray", "resolveGetter", "reinterpret", "indexed", "x", "predicate", "thisArg", "accessors", "get", "n", "i", "complex", "view", "countIf", "main"]
}
