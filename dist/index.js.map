{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isAccessorArray = require( '@stdlib/array-base-assert-is-accessor-array' );\nvar resolveGetter = require( '@stdlib/array-base-resolve-getter' );\n\n\n// FUNCTIONS //\n\n/**\n* Counts the number of elements in an indexed array which pass a test implemented by a predicate function.\n*\n* @private\n* @param {Collection} x - input array\n* @param {Function} predicate - predicate function\n* @param {*} thisArg - predicate function evaluation context\n* @returns {NonNegativeInteger} result\n*\n* @example\n* function predicate( value ) {\n*     return ( value > 0 );\n* }\n*\n* var x = [ 0, 1, 0, 1, 1 ];\n*\n* var n = indexed( x, predicate, {} );\n* // returns 3\n*/\nfunction indexed( x, predicate, thisArg ) {\n\tvar n;\n\tvar i;\n\n\tn = 0;\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\tif ( predicate.call( thisArg, x[ i ], i, x ) ) {\n\t\t\tn += 1;\n\t\t}\n\t}\n\treturn n;\n}\n\n/**\n* Counts the number of elements in an accessor array which pass a test implemented by a predicate function.\n*\n* @private\n* @param {Collection} x - input array\n* @param {Function} predicate - predicate function\n* @param {*} thisArg - predicate function evaluation context\n* @returns {NonNegativeInteger} result\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n*\n* function predicate( value ) {\n*     return ( value > 0 );\n* }\n*\n* var x = toAccessorArray( [ 0, 1, 0, 1, 1 ] );\n*\n* var n = accessors( x, predicate, {} );\n* // returns 3\n*/\nfunction accessors( x, predicate, thisArg ) {\n\tvar get;\n\tvar n;\n\tvar i;\n\n\tget = resolveGetter( x );\n\n\tn = 0;\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\tif ( predicate.call( thisArg, get( x, i ), i, x ) ) {\n\t\t\tn += 1;\n\t\t}\n\t}\n\treturn n;\n}\n\n\n// MAIN //\n\n/**\n* Counts the number of elements in an array which pass a test implemented by a predicate function.\n*\n* @param {Collection} x - input array\n* @param {Function} predicate - predicate function\n* @param {*} [thisArg] - predicate function evaluation context\n* @returns {NonNegativeInteger} result\n*\n* @example\n* function predicate( value ) {\n*     return ( value > 0 );\n* }\n*\n* var x = [ 0, 1, 0, 1, 1 ];\n*\n* var n = countIf( x, predicate );\n* // returns 3\n*/\nfunction countIf( x, predicate, thisArg ) {\n\tif ( isAccessorArray( x ) ) {\n\t\treturn accessors( x, predicate, thisArg );\n\t}\n\treturn indexed( x, predicate, thisArg );\n}\n\n\n// EXPORTS //\n\nmodule.exports = countIf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Count the number of elements in an array which pass a test implemented by a predicate function.\n*\n* @module @stdlib/array-base-count-if\n*\n* @example\n* var countIf = require( '@stdlib/array-base-count-if' );\n*\n* function predicate( value ) {\n*     return ( value > 0 );\n* }\n*\n* var x = [ 0, 1, 0, 1, 2 ];\n*\n* var n = countIf( x, predicate );\n* // returns 3\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAkB,QAAS,6CAA8C,EACzEC,EAAgB,QAAS,mCAAoC,EAwBjE,SAASC,EAASC,EAAGC,EAAWC,EAAU,CACzC,IAAIC,EACAC,EAGJ,IADAD,EAAI,EACEC,EAAI,EAAGA,EAAIJ,EAAE,OAAQI,IACrBH,EAAU,KAAMC,EAASF,EAAGI,CAAE,EAAGA,EAAGJ,CAAE,IAC1CG,GAAK,GAGP,OAAOA,CACR,CAuBA,SAASE,EAAWL,EAAGC,EAAWC,EAAU,CAC3C,IAAII,EACA,EACAF,EAKJ,IAHAE,EAAMR,EAAeE,CAAE,EAEvB,EAAI,EACEI,EAAI,EAAGA,EAAIJ,EAAE,OAAQI,IACrBH,EAAU,KAAMC,EAASI,EAAKN,EAAGI,CAAE,EAAGA,EAAGJ,CAAE,IAC/C,GAAK,GAGP,OAAO,CACR,CAuBA,SAASO,EAASP,EAAGC,EAAWC,EAAU,CACzC,OAAKL,EAAiBG,CAAE,EAChBK,EAAWL,EAAGC,EAAWC,CAAQ,EAElCH,EAASC,EAAGC,EAAWC,CAAQ,CACvC,CAKAN,EAAO,QAAUW,ICxFjB,IAAIC,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isAccessorArray", "resolveGetter", "indexed", "x", "predicate", "thisArg", "n", "i", "accessors", "get", "countIf", "main"]
}
